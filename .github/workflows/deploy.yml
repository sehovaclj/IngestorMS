# This CI/CD Pipeline does not actually work. I set it up as a placeholder
# since this would be the next step during my development process of the EMS
# system.

name: CI/CD Pipeline

on:
  push:
    branches:
      - does-not-work-placeholder-only

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # Export environment variables
      - name: Export new environment variables
        run: |
          echo "BROKER=${{ secrets.BROKER }}" >> $GITHUB_ENV
          echo "PORT=${{ secrets.PORT }}" >> $GITHUB_ENV
          echo "SHARED_TOPIC_METRICS=${{ secrets.SHARED_TOPIC_METRICS }}" >> $GITHUB_ENV
          echo "SHARED_TOPIC_SHUTDOWN=${{ secrets.SHARED_TOPIC_SHUTDOWN }}" >> $GITHUB_ENV
          echo "KAFKA_TOPIC=${{ secrets.KAFKA_TOPIC }}" >> $GITHUB_ENV
          echo "KAFKA_BROKER=${{ secrets.KAFKA_BROKER }}" >> $GITHUB_ENV
          echo "NUM_PARTITIONS=${{ secrets.NUM_PARTITIONS }}" >> $GITHUB_ENV


      # Install dependencies with Pipenv
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev

      # Lint code with pylint
      - name: Lint code with pylint
        run: |
          pipenv run pylint .

      # Run tests with pytest
      - name: Run tests with pytest
        run: |
          pipenv run pytest -v

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build Docker image
      - name: Build Docker image
        run: |
          docker build -t your-dockerhub-username/your-app-name:latest .

      # Push Docker image to registry
      - name: Push Docker image to Docker Hub
        run: |
          docker push your-dockerhub-username/your-app-name:latest

      # Notify central server of new image so it can push to a kafka topic
      # which can update the Microservice via a rolling update.
      - name: Notify Central Server
        run: |
          curl -X POST https://your-central-server.com/notify/RestApiServerMS \
            -H "Content-Type: application/json" \
            -d '{"image": "your-dockerhub-username/your-app-name:latest"}'
